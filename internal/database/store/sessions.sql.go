// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package store

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    id
) VALUES (
    ?
)
RETURNING id, created_at, locale
`

func (q *Queries) CreateSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, id)
	var i Session
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Locale)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE from sessions
WHERE id = ?
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, created_at, locale FROM sessions
WHERE id = ? LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Locale)
	return i, err
}

const listSessions = `-- name: ListSessions :many
SELECT id, created_at, locale FROM sessions
ORDER BY created_at DESC
`

func (q *Queries) ListSessions(ctx context.Context) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, listSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.Locale); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocale = `-- name: UpdateLocale :exec
UPDATE sessions
set locale = ?
WHERE id = ?
`

type UpdateLocaleParams struct {
	Locale string
	ID     string
}

func (q *Queries) UpdateLocale(ctx context.Context, arg UpdateLocaleParams) error {
	_, err := q.db.ExecContext(ctx, updateLocale, arg.Locale, arg.ID)
	return err
}
