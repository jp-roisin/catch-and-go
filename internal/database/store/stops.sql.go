// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: stops.sql

package store

import (
	"context"
)

const getStop = `-- name: GetStop :one
SELECT id, code, geo, name, created_at FROM stops
WHERE code = ? LIMIT 1
`

func (q *Queries) GetStop(ctx context.Context, code string) (Stop, error) {
	row := q.db.QueryRowContext(ctx, getStop, code)
	var i Stop
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Geo,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const listStops = `-- name: ListStops :many
SELECT id, code, geo, name, created_at FROM stops
ORDER BY code ASC
`

func (q *Queries) ListStops(ctx context.Context) ([]Stop, error) {
	rows, err := q.db.QueryContext(ctx, listStops)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stop
	for rows.Next() {
		var i Stop
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Geo,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
