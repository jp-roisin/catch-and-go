// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dashboards.sql

package store

import (
	"context"
	"database/sql"
)

const createdashboard = `-- name: Createdashboard :one
INSERT INTO dashboards (
    session_id,
    stop_id
) VALUES (
    ?, ?
)
RETURNING id, session_id, stop_id, created_at
`

type CreatedashboardParams struct {
	SessionID string
	StopID    int64
}

func (q *Queries) Createdashboard(ctx context.Context, arg CreatedashboardParams) (Dashboard, error) {
	row := q.db.QueryRowContext(ctx, createdashboard, arg.SessionID, arg.StopID)
	var i Dashboard
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.StopID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDashboard = `-- name: DeleteDashboard :exec
DELETE from dashboards
WHERE id = ? AND session_id = ?
`

type DeleteDashboardParams struct {
	ID        int64
	SessionID string
}

func (q *Queries) DeleteDashboard(ctx context.Context, arg DeleteDashboardParams) error {
	_, err := q.db.ExecContext(ctx, deleteDashboard, arg.ID, arg.SessionID)
	return err
}

const listDashboardsFromSession = `-- name: ListDashboardsFromSession :many
SELECT
  d.id AS dashboard_id,
  d.session_id,
  d.stop_id,
  d.created_at AS dashboard_created_at,
  s.id AS stop_id,
  s.code AS stop_code,
  s.geo AS stop_geo,
  s.name AS stop_name,
  s.created_at AS stop_created_at
FROM dashboards d
JOIN stops s ON s.id = d.stop_id
WHERE d.session_id = ?
ORDER BY s.created_at ASC
`

type ListDashboardsFromSessionRow struct {
	DashboardID        int64
	SessionID          string
	StopID             int64
	DashboardCreatedAt sql.NullTime
	StopID_2           int64
	StopCode           string
	StopGeo            string
	StopName           string
	StopCreatedAt      sql.NullTime
}

func (q *Queries) ListDashboardsFromSession(ctx context.Context, sessionID string) ([]ListDashboardsFromSessionRow, error) {
	rows, err := q.db.QueryContext(ctx, listDashboardsFromSession, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDashboardsFromSessionRow
	for rows.Next() {
		var i ListDashboardsFromSessionRow
		if err := rows.Scan(
			&i.DashboardID,
			&i.SessionID,
			&i.StopID,
			&i.DashboardCreatedAt,
			&i.StopID_2,
			&i.StopCode,
			&i.StopGeo,
			&i.StopName,
			&i.StopCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
