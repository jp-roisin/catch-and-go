// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: lines.sql

package store

import (
	"context"
)

const getLine = `-- name: GetLine :one
SELECT id, code, destination, direction, created_at, mode, color FROM lines
WHERE code = ? AND direction = ? LIMIT 1
`

type GetLineParams struct {
	Code      string
	Direction int64
}

func (q *Queries) GetLine(ctx context.Context, arg GetLineParams) (Line, error) {
	row := q.db.QueryRowContext(ctx, getLine, arg.Code, arg.Direction)
	var i Line
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Destination,
		&i.Direction,
		&i.CreatedAt,
		&i.Mode,
		&i.Color,
	)
	return i, err
}

const listLines = `-- name: ListLines :many
SELECT id, code, destination, direction, created_at, mode, color FROM lines
ORDER BY code ASC
`

func (q *Queries) ListLines(ctx context.Context) ([]Line, error) {
	rows, err := q.db.QueryContext(ctx, listLines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Line
	for rows.Next() {
		var i Line
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Destination,
			&i.Direction,
			&i.CreatedAt,
			&i.Mode,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
